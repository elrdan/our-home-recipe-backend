plugins {
    id 'java'   // Java 플러그인을 적용하여 Java 애플리케이션 빌드 및 테스트 기능을 제공
    id 'org.springframework.boot' version '3.3.2' // Spring Boot 플러그인을 적용하여 Spring Boot 애플리케이션을 설정하고 실행할 수 있도록 도와준다.
    id 'io.spring.dependency-management' version '1.1.6' // 종속성 관리를 위해 사용되며, 종속성 버전을 중앙에서 관리할 수 있도록 해준다.
}

allprojects {
    sourceCompatibility = '17'
    targetCompatibility = '17'

    // 라이브러리들을 받아올 원격 저장소들을 설정함
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group = 'com.ourhomerecipe.backend'
    version = '0.0.1'

    dependencies {
        // Spring Boot 기본 스타터
        implementation "org.springframework.boot:spring-boot-starter-data-jpa"
        implementation "org.springframework.boot:spring-boot-starter-web"
        implementation "org.springframework.boot:spring-boot-starter-test"
        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0' // Swagger-UI 의존성 추가

        // Lombok
        implementation "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
    }
}

/**
 * allGeneratedDocs
 * 각 서비스의 openapi3문서를 생성하고, 생성된 문서를 gateway 모듈에 복사하여 관리
 */
tasks.register("allGeneratedDocs", Copy) {
    def services = ['member']

    services.each { service ->
        dependsOn(":api:${service}:openapi3")

        def buildDir = project(":api:${service}").layout.buildDirectory

        from(buildDir.file("api-spec/openapi3.yaml")) {
            rename { fileName ->
                fileName.replace("openapi3.yaml", "${service}-openapi3.yaml")
            }
        }
        into(project(":api:gateway").file("src/main/resources/static"))
    }
}
